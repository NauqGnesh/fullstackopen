{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shepard_of_dark/Code/Web/fullstackopen/part1/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\"; //Components\n\nconst Header = ({\n  title\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\" \", title, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Header;\n\nconst Total = ({\n  message,\n  total\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\" \", message, \" \", total]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = Total;\n\nconst ItemCount = ({\n  name,\n  count\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [name, \" \", count]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n};\n\n_c3 = ItemCount;\n\nconst Average = ({\n  good,\n  neutral,\n  bad\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"average\", \" \", (good - bad) / (good + neutral + bad)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n};\n\n_c4 = Average;\n\nconst Positive = ({\n  good,\n  neutral,\n  bad\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"positive\", \" \", good * 100.0 / (good + neutral + bad)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n};\n\n_c5 = Positive;\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0); //event handlers for feedback button\n\n  function handleFeedbackButton(feedbackType) {\n    if (feedbackType === \"good\") {\n      return () => {\n        const counter = good + 1;\n        setGood(counter);\n      };\n    }\n\n    if (feedbackType === \"neutral\") {\n      return () => {\n        const counter = neutral + 1;\n        setNeutral(counter);\n      };\n    }\n\n    if (feedbackType === \"bad\") {\n      return () => {\n        const counter = bad + 1;\n        setBad(counter);\n      };\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFeedbackButton(\"good\"),\n      children: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFeedbackButton(\"neutral\"),\n      children: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFeedbackButton(\"bad\"),\n      children: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      title: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ItemCount, {\n      name: \"good\",\n      count: good\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ItemCount, {\n      name: \"neutral\",\n      count: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ItemCount, {\n      name: \"bad\",\n      count: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Total, {\n      message: \"all\",\n      total: good + neutral + bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Average, {\n      good: good,\n      neutral: neutral,\n      bad: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Positive, {\n      good: good,\n      neutral: neutral,\n      bad: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c6 = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 89,\n  columnNumber: 17\n}, this), document.getElementById(\"root\")); // part a & b\n// const App = () => {\n//     const course = {\n//         name: \"Half Stack application development\",\n//         parts: [\n//             {\n//                 name: \"Fundamentals of React\",\n//                 exercises: 10,\n//             },\n//             {\n//                 name: \"Using props to pass data\",\n//                 exercises: 7,\n//             },\n//             {\n//                 name: \"State of a component\",\n//                 exercises: 14,\n//             },\n//         ],\n//     };\n//\n//     let sum = 0;\n//     course.parts.forEach((part) => (sum += part.exercises));\n//\n//     return (\n//         <div>\n//             <Header course={course.name} />\n//             <Part\n//                 excetilterciseName={course.parts[0].name}\n//                 exerciseNum={course.parts[0].exercises}\n//             />\n//             <Part\n//                 excerciseName={course.parts[1].name}\n//                 exerciseNum={course.parts[1].exercises}\n//             />\n//             <Part\n//                 excerciseName={course.parts[2].name}\n//                 exerciseNum={course.parts[2].exercises}\n//             />\n//             <Total total={sum} />\n//         </div>\n//     );\n// };\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Total\");\n$RefreshReg$(_c3, \"ItemCount\");\n$RefreshReg$(_c4, \"Average\");\n$RefreshReg$(_c5, \"Positive\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"sources":["/home/shepard_of_dark/Code/Web/fullstackopen/part1/src/index.js"],"names":["React","useState","ReactDOM","Header","title","Total","message","total","ItemCount","name","count","Average","good","neutral","bad","Positive","App","setGood","setNeutral","setBad","handleFeedbackButton","feedbackType","counter","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n//Components\nconst Header = ({ title }) => {\n\treturn <h1> {title} </h1>;\n};\n\nconst Total = ({ message, total }) => {\n\treturn (\n\t\t<p>\n\t\t\t{\" \"}\n\t\t\t{message} {total}\n\t\t</p>\n\t);\n};\n\nconst ItemCount = ({ name, count }) => {\n\treturn (\n\t\t<p>\n\t\t\t{name} {count}\n\t\t</p>\n\t);\n};\n\nconst Average = ({ good, neutral, bad }) => {\n\treturn (\n\t\t<p>\n\t\t\t{\"average\"} {(good - bad) / (good + neutral + bad)}\n\t\t</p>\n\t);\n};\n\nconst Positive = ({ good, neutral, bad }) => {\n\treturn (\n\t\t<p>\n\t\t\t{\"positive\"} {(good * 100.0) / (good + neutral + bad)}\n\t\t</p>\n\t);\n};\n\nconst App = () => {\n\t// save clicks of each button to its own state\n\tconst [good, setGood] = useState(0);\n\tconst [neutral, setNeutral] = useState(0);\n\tconst [bad, setBad] = useState(0);\n\n\t//event handlers for feedback button\n\tfunction handleFeedbackButton(feedbackType) {\n\t\tif (feedbackType === \"good\") {\n\t\t\treturn () => {\n\t\t\t\tconst counter = good + 1;\n\t\t\t\tsetGood(counter);\n\t\t\t};\n\t\t}\n\n\t\tif (feedbackType === \"neutral\") {\n\t\t\treturn () => {\n\t\t\t\tconst counter = neutral + 1;\n\t\t\t\tsetNeutral(counter);\n\t\t\t};\n\t\t}\n\n\t\tif (feedbackType === \"bad\") {\n\t\t\treturn () => {\n\t\t\t\tconst counter = bad + 1;\n\t\t\t\tsetBad(counter);\n\t\t\t};\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Header title={\"Give feedback\"} />\n\t\t\t<button onClick={handleFeedbackButton(\"good\")}>good</button>\n\t\t\t<button onClick={handleFeedbackButton(\"neutral\")}>neutral</button>\n\t\t\t<button onClick={handleFeedbackButton(\"bad\")}>bad</button>\n\t\t\t<Header title={\"Statistics\"} />\n\t\t\t<ItemCount name=\"good\" count={good} />\n\t\t\t<ItemCount name=\"neutral\" count={neutral} />\n\t\t\t<ItemCount name=\"bad\" count={bad} />\n\t\t\t<Total message=\"all\" total={good + neutral + bad} />\n\t\t\t<Average good={good} neutral={neutral} bad={bad} />\n\t\t\t<Positive good={good} neutral={neutral} bad={bad} />\n\t\t</div>\n\t);\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// part a & b\n// const App = () => {\n//     const course = {\n//         name: \"Half Stack application development\",\n//         parts: [\n//             {\n//                 name: \"Fundamentals of React\",\n//                 exercises: 10,\n//             },\n//             {\n//                 name: \"Using props to pass data\",\n//                 exercises: 7,\n//             },\n//             {\n//                 name: \"State of a component\",\n//                 exercises: 14,\n//             },\n//         ],\n//     };\n//\n//     let sum = 0;\n//     course.parts.forEach((part) => (sum += part.exercises));\n//\n//     return (\n//         <div>\n//             <Header course={course.name} />\n//             <Part\n//                 excetilterciseName={course.parts[0].name}\n//                 exerciseNum={course.parts[0].exercises}\n//             />\n//             <Part\n//                 excerciseName={course.parts[1].name}\n//                 exerciseNum={course.parts[1].exercises}\n//             />\n//             <Part\n//                 excerciseName={course.parts[2].name}\n//                 exerciseNum={course.parts[2].exercises}\n//             />\n//             <Total total={sum} />\n//         </div>\n//     );\n// };\n"]},"metadata":{},"sourceType":"module"}